[{"content":"Note: Before making any major changes, always make a backup. Refer to the official documentation on how to perform one.\nBreakdown Step 1. Installation Note: The following installation guide was verified working on EdgeOS v2.0.9-hotfix.4 as of Feb 2023.\nVerify your EdgeOS version show version Download Wireguard Head over to WireGuard\u0026rsquo;s EdgeOS releases and look for the release that matches your platform/version.\nOn the ER-X, use curl to download the .deb file\ncurl -OL https://github.com/WireGuard/wireguard-vyatta-ubnt/releases/download/1.0.20220627-1/e50-v2-v1.0.20220627-v1.0.20210914.deb Install with dpkg sudo dpkg -i e50-v2-v1.0.20220627-v1.0.20210914.deb Output Log\nuser@ER-X:~$ sudo dpkg -i e50-v2-v1.0.20220627-v1.0.20210914.deb Selecting previously unselected package wireguard. (Reading database ... 37091 files and directories currently installed.) Preparing to unpack e50-v2-v1.0.20220627-v1.0.20210914.deb ... Adding \u0026#39;diversion of /opt/vyatta/share/perl5/Vyatta/Interface.pm to /opt/vyatta/share/perl5/Vyatta/Interface.pm.vyatta by wireguard\u0026#39; Adding \u0026#39;diversion of /opt/vyatta/share/vyatta-cfg/templates/firewall/options/mss-clamp/interface-type/node.def to /opt/vyatta/share/vyatta-cfg/templates/firewall/options/mss-clamp/interface-type/node.def.vyatta by wireguard\u0026#39; Adding \u0026#39;diversion of /opt/vyatta/share/vyatta-cfg/templates/firewall/options/mss-clamp6/interface-type/node.def to /opt/vyatta/share/vyatta-cfg/templates/firewall/options/mss-clamp6/interface-type/node.def.vyatta by wireguard\u0026#39; Unpacking wireguard (1.0.20220627-1) ... Setting up wireguard (1.0.20220627-1) ... If there is no space available If additional storage space is needed, you can safely delete the backup system image (not the currently running firmware).\ndelete system image You can check if wireguard is installed by running:\nwg version Output log:\nuser@ER-X:~$ wg version wireguard-tools v1.0.20210914 - https://git.zx2c4.com/wireguard-tools/ Step 2. Key Creation Confirm working directory\npwd Generate Server Keys Create folder for your server keys You can create it in the /config directory to preserve your files during upgrades, and to make it easier during backups.\ncd /config Create a folder wireguard, then create another folder for server_keys\nmkdir wireguard; cd wireguard mkdir server_keys; cd server_keys Generate a key pair for the Wireguard server\nwg genkey | tee privatekey | wg pubkey \u0026gt; publickey Note your public and private key for the next configuration steps.\ncat publickey privatekey Generate Client Keys Move to wireguard directory.\ncd /config/wireguard Create folder wg_clients\nmkdir wg_clients ; cd wg_clients Create folder for client01\nmkdir client01 ; cd client01 Generate client keys.\nwg genkey | tee privatekey | wg pubkey \u0026gt; publickey Note your public and private key for the next configuration steps.\ncat publickey privatekey Example output:\nuser@ER-X:~$ cat privatekey publickey sAoqK3dXpc2UbOn2LWb/MMcHTKtU0nqHjDQiXqNcyHs= Bf6LBfuoRDRbO4EJ+tawJXu6qu5BOWaXGK0V+uVRC3Q= Step 3. wg0 Interface Configuration Enter configure mode\nconfigure Set the location of the server\u0026rsquo;s private-key, previously generated\nset interfaces wireguard wg0 private-key \u0026lt;server-private-key-here\u0026gt; Create the Gateway IP for the VPN and the subnet This subnet can be any private IP range, though make sure to check for conflicts\nset interfaces wireguard wg0 address 10.0.0.1/32 Create entries in the route table for the VPN subnet\nset interfaces wireguard wg0 route-allowed-ips true Set the UDP port for WG (that peers will use) WireGuard default port is 51820, but can be changed to any port\nset interfaces wireguard wg0 listen-port 51820 Save\ncommit ; save Step 4. Adding peers to the wg0 Interface Adding Client 01 Note: make sure you are in configure mode.\nset interfaces wireguard wg0 peer \u0026lt;public-key-here\u0026gt; set interfaces wireguard wg0 peer \u0026lt;public-key-here\u0026gt; allowed-ips 10.0.0.5/32 set interfaces wireguard wg0 peer \u0026lt;public-key-here\u0026gt; description client01 Adding Additional Clients When adding additional peers, repeat the steps above, make sure to update allowed-ips and description for the new clients.\nset interfaces wireguard wg0 peer \u0026lt;public-key-here\u0026gt; set interfaces wireguard wg0 peer \u0026lt;public-key-here\u0026gt; allowed-ips 10.0.0.6/32 set interfaces wireguard wg0 peer \u0026lt;public-key-here\u0026gt; description client02 Save\ncommit ; save Step 5. Create firewall rules for WireGuard Create an accept rule in WAN_LOCAL to accept all incoming UDP connections from port 51820 (or any port of your choice).\nset firewall name WAN_LOCAL rule 50 action accept set firewall name WAN_LOCAL rule 50 protocol udp set firewall name WAN_LOCAL rule 50 destination port 51820 set firewall name WAN_LOCAL rule 50 description \u0026#39;WireGuard\u0026#39; Save\ncommit ; save Once this is done, your wg0 interface and firewall configuration should look something like this.\nuser@ER-X$ show configuration wireguard wg0 { address 10.0.0.1/32 listen-port 51820 peer Bf6LBfuoRDRbO4EJ+tawJXu6qu5BOWaXGK0V+uVRC3Q= { allowed-ips 10.0.0.6/32 description client02 } peer Kf6LBfuoRDRbO4EJ+tawJXu6qu5BOWaXGK0V+uVRC3Q= { allowed-ips 10.0.0.5/32 description client01 } } private-key **************** route-allowed-ips true } } rule 50 { action accept description WireGuard destination { port 51820 } log enable protocol udp source { } } } } Step 6. Constructing the Config on the peer side Config File (.conf) Create a file on the peer, with the file extension as .conf\nThe peer side needs a few pieces of information to create the tunnel:\nThe server’s public key The server’s endpoint (public IP address, or DNS record) The peer’s private key The peer’s IP address in the VPN subnet (the allowed IPs value set on the server) Therefore, the previously generated client01 private-key and the server-public-key, should be copied to the peer device.\nThe configuration should look something like the one below:\nExample Client 01 [Interface] PrivateKey = \u0026lt;private-key-here\u0026gt; ListenPort = 51820 Address = 10.0.0.5/32 DNS = \u0026lt;any dns\u0026gt;, 9.9.9.9 [Peer] PublicKey = \u0026lt;public-key-here\u0026gt; AllowedIPs = 0.0.0.0/0 Endpoint = \u0026lt;your-public-ip-or-dynamic-dns-hostname\u0026gt;:51820 Example Client 02 [Interface] PrivateKey = \u0026lt;private-key-here\u0026gt; ListenPort = 51820 Address = 10.0.0.6/32 DNS = \u0026lt;any dns\u0026gt;, 9.9.9.9 [Peer] PublicKey = \u0026lt;public-key-here\u0026gt; AllowedIPs = 0.0.0.0/0 Endpoint = \u0026lt;your-public-ip-or-dynamic-dns-hostname\u0026gt;:51820 Once the .conf file is created, you can import that into the peer/device of your choice.\nTo bring up your tunnel, you can use the wg-quick command.\nwg-quick up client01.conf Run wg show on your peer to verify you are connected to the endpoint.\nuser@PC$ wg show interface: client01 public key: \u0026lt;private-key\u0026gt; private key: (hidden) listening port: 51820 fwmark: 0xca6c peer: \u0026lt;peer-key\u0026gt; endpoint: xx.xx.xx.xx:51820 allowed ips: 0.0.0.0/0 latest handshake: 11 seconds ago transfer: 3.11 MiB received, 6.92 MiB sent Step 7. Save WireGuard Keys and Configuration Files Once the above configuration is made, you can easily save the config by running a backup from the Edgerouter\u0026rsquo;s GUI.\nNavigate to the System tab in the bottom-left of the GUI to download the backup configuration archive. System \u0026gt; Configuration Management \u0026amp; Device Maintenance \u0026gt; Back Up Config\nDownload the backup config file by clicking on the Download button.\nThe EdgeRouter will prompt you to save the archive on your computer.\nYou can then extract this file on your local machine, and in the /config directory, you\u0026rsquo;ll find the wireguard public and private keys you generated earlier.\nQuick Script Warning, the following script is not guaranteed to work, you may need to modify it according to your specific platform/version. Use at your own risk.\nDetermine shell with echo $SHELL\nuser@ER-X:~$ echo $SHELL /bin/vbash EdgeOS comes with vi, you can use that to create the script.\nuser@ER-X:~$ touch wg-setup.sh user@ER-X:~$ vi wg-setup.sh NOTE: Make sure to modify your $SHELL in case it differs, for EdgeOS, it will usually be #!/bin/vbash\nPaste the following:\n#!/bin/vbash /bin/ip link add dev wg0 type wireguard /bin/ip addr add 10.0.0.1/32 dev wg0 /usr/bin/sudo /usr/bin/wg setconf wg0 /home/$USER/wg0.conf /bin/ip link set up dev wg0 /bin/ip route add 10.0.0.1/32 dev wg0 /usr/bin/sudo /sbin/ifconfig wg0 mtu 1300 Make executable\nchmod +x wg-setup.sh Run\n./wg-setup.sh Sources:\nhttps://github.com/WireGuard/wireguard-vyatta-ubnt/wiki/EdgeOS-and-Unifi-Gateway https://www.wireguard.com/quickstart/ https://blog.usman.network/posts/wireguard-vpn-on-a-ubiquiti-edgerouter/ ","permalink":"https://netsparse.dev/posts/2023-02-22-setup-wireguard-edgerouter/","summary":"Note: Before making any major changes, always make a backup. Refer to the official documentation on how to perform one.\nBreakdown Step 1. Installation Note: The following installation guide was verified working on EdgeOS v2.0.9-hotfix.4 as of Feb 2023.\nVerify your EdgeOS version show version Download Wireguard Head over to WireGuard\u0026rsquo;s EdgeOS releases and look for the release that matches your platform/version.\nOn the ER-X, use curl to download the .","title":"Setup WireGuard VPN Server on Edgerouter X (EdgeOS)"},{"content":"One awesome feature in Proxmox VE is to run an LXC (Linux Container) directly from the web interface.\nA quick machine can be spun up that works and acts just like a regular full-blown Linux Virtual machine.\nThe downside to this is we are limited to what resources you provide the VM, not the resources that are given to an LXC (which is essentially the maximum of the host system).\nSide Note\nThis requires running an LXC as Unprivileged. To learn more about what this means, please refer to the Proxmox documentation, or check out the official LXC docs here.\nPreparing Proxmox Note: This will need to be done on each Proxmox host you have, so each command will need to be done for how ever many hosts you have Enable Kernel Modules\nThe overlay and aufs kernel modules need to be enabled to support running containers:\necho -e \u0026#34;overlay\\naufs\u0026#34; \u0026gt;\u0026gt; /etc/modules-load.d/modules.conf Please note that the aufs module is deprecated as of Proxmox VE 7.0 This CAN be explicitly enabled, but it won’t do anything Reboot host For the changes to take effect, reboot the host\nCheck changes Upon starting back up, run the following:\nlsmod | grep -E \u0026#39;over This should return something like:\noverlay 131072 3 Create an unprivileged container The creation process is pretty standard, and what you’re used to. But there are a few changes you will need to make along the way:\nOn the Proxmox GUI, click the Create CT button Make sure you have “Unprivileged container” checked For the rest of the setup, give it your preferred configuration Make sure you don’t start the container upon creation Edit container’s features Click on your new container\nGo to Options Double-click on the Features row Ensure that the following are checked: keyctl nesting Click OK Start the container Install Docker Head over to Docker’s docs, and find the steps to install docker for your distro.\nOnce all set up, test out the installation with docker run hello-world and it should be working!\nThis guide is based from Quinn Henry\u0026rsquo;s blog over at https://quibtech.com\n","permalink":"https://netsparse.dev/posts/2023-01-30-docker-on-lxc/","summary":"\u003cp\u003eOne awesome feature in Proxmox VE is to run an LXC (Linux Container) directly from the web interface.\u003c/p\u003e","title":"Running Docker containers in a Proxmox LXC container"},{"content":"Brief H1DC and H2DC have been projects I\u0026rsquo;ve been working on long before starting this site. Both labs are meant to be a testing platform for me in learning new technologies, I\u0026rsquo;ve been able to build them throughout the past 4 years, although they have been in constant flux, I believe these labs have definitely influenced my journey and development as an IT professional, and continue to influence my learning everyday.\nHomelab #1 \u0026ldquo;H1DC\u0026rdquo; Logical Layout Physical Layout The first home lab titled \u0026ldquo;H1DC\u0026rdquo; (\u0026ldquo;DC\u0026rdquo; short for Datacenter), was actually my first lab, and is now currently hosted at my mother\u0026rsquo;s residence, which I manage remotely if needed.\nAlthough the lab has gone through many changes over the years, the diagram above illustrates the most recent version of how the network is laid out, and the services currently hosted there.\nAs you may see, I\u0026rsquo;ve tried to keep things a bit simple, as compared to Homelab #2, as H1DC is no longer my primary lab, therefore I only host a few docker containers there.\nDevices 1 Mini Server\nRaspberry Pi 3b+ 3 Network Devices\nEdgerouter X router (as the \u0026ldquo;CORE\u0026rdquo; router) TP-Link 5 port PoE switch (as my \u0026ldquo;CORE\u0026rdquo; switch) Ubiquiti AP-AC Lite Access Point 3 IP cameras\nReolink Power Supplies\nAPC Back-UPS (BE425M) 425VA/255W Services Local:\nSMB DNS FTP VPN (through Pi-VPN, and WireGuard on Edgerouter X) Deployed using Docker:\nPortainer Nginx Proxy Manager Jellyfin Heimdall Bookstack Watchtower Uptime Kuma Pi-hole UniFi controller Speedtest-tracker Filebrowser Homelab #2 \u0026ldquo;H2DC\u0026rdquo; Logical Layout Physical Layout The second lab, titled \u0026ldquo;H2DC\u0026rdquo;, is my current lab at my current residence and has been in development since 2020.\nDevices 2 Servers\nSynology DS720+ NAS (as my \u0026ldquo;STORAGE\u0026rdquo; node) Dell Optiplex Micro 3020M (as my \u0026ldquo;COMPUTE\u0026rdquo; node) 4 Network Devices\nUbiquiti Edgerouter X (as the \u0026ldquo;CORE\u0026rdquo; router) UniFi Flex Mini (as the \u0026ldquo;CORE\u0026rdquo; switch) Netgear switch (as an \u0026ldquo;ACCESS\u0026rdquo; switch) Ubiquiti AP-AC Lite Access Point Power Supplies\n2 x APC Back-UPS Pro (BR1000MS), 1000VA/600W Sine Wave Services Local:\nSMB DNS VPN (through WireGuard via Tailscale) Active Directory (planned) Deployed using Docker:\nPortainer Nginx Proxy Manager Jellyfin Tailscale Heimdall Watchtower Uptime Kuma Pi-hole UniFi controller Speedtest-tracker Filebrowser Bookstack Mealie Kiwix Navidrome \u0026amp; more\u0026hellip;\nThe physical layout in my opinion is not very sophisticated, all the lab devices are actually housed in my TV stand in the living room as you can see below:\nThe devices are not entirely enclosed as there is an inlet in the back of the TV stand, which allows some airflow to and from the devices.\nYou can also see where my UPS is located:\nI have 2 of these APC UPS devices, one in the living room and the other in my office/bedroom.\nPower Utilization Both UPS devices are 1000VA/600W, the one in the living room can run for about 1hr 30min at 37-40W in the event of a power outage.\nIn Summary The home lab projects have been an invaluable learning experience, and I hope to continue my learning through the use of these labs, they have definitely been a great learning experience and hobby.\n","permalink":"https://netsparse.dev/posts/2023-01-23-lab-overview/","summary":"Brief H1DC and H2DC have been projects I\u0026rsquo;ve been working on long before starting this site. Both labs are meant to be a testing platform for me in learning new technologies, I\u0026rsquo;ve been able to build them throughout the past 4 years, although they have been in constant flux, I believe these labs have definitely influenced my journey and development as an IT professional, and continue to influence my learning everyday.","title":"2023 Lab Overview"},{"content":"Just a quick write up showing how to setup a quick iPerf test between 2 hosts.\nThese come in handy when you need them.\nInstallation The following guide is written for users utilizing Linux, and assumes you have installed iPerf onto your local system.\nFor Windows or Mac users, you can find the latest pre-compiled binaries on iPerf\u0026rsquo;s official website.\nServer Setup Run iperf -s This will setup the current host as the SERVER, you\u0026rsquo;ll see a similar output as below:\nNow go over to the client computer and run the steps below.\nClient Setup Run iperf -c \u0026lt;server to connect to\u0026gt; Replace \u0026lt;server to connect to\u0026gt; with the IP address of the server you setup before.\nIn our example, it is 192.168.2.198.\nYou\u0026rsquo;ll see the client establish a connection to the server and output the results on the screen.\nYou\u0026rsquo;ll also see the same from the server side.\nDone.\nOur results will be shown when test is completed, usually after a few seconds (depending on your network).\nAdditional Reference For any additional commands or reference, check out:\nWeb:\nhttps://iperf.fr/iperf-doc.php\nCLI:\niperf --help man iperf ","permalink":"https://netsparse.dev/posts/2023-01-23-quick-iperf-test/","summary":"\u003cp\u003eJust a quick write up showing how to setup a quick iPerf test between 2 hosts.\u003c/p\u003e","title":"Quick iPerf test"},{"content":"Every once in a while, I run an update on my proxmox server and reboot.\nUsually after any major update or reboot, the subscription notice banner reappears on the login screen, which can be a bit distracting. Tested on Proxmox 7.2.\nQuick Removal To get rid of the message, open a shell under the root user and type in the snippet below.\nsed -Ezi.bak \u0026#34;s/(Ext.Msg.show\\(\\{\\s+title: gettext\\(\u0026#39;No valid sub)/void\\(\\{ \\/\\/\\1/g\u0026#34; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js \u0026amp;\u0026amp; systemctl restart pveproxy.service Breakdown Here are alternative step by step instructions so you can understand what the above command is doing:\nChange to working directory cd /usr/share/javascript/proxmox-widget-toolkit Make a backup cp proxmoxlib.js proxmoxlib.js.bak Edit the file nano proxmoxlib.js Locate the following code (Use ctrl+w in nano and search for “No valid subscription”) Ext.Msg.show({ title: gettext(\u0026#39;No valid subscription\u0026#39;), Replace “Ext.Msg.show” with “void” void({ //Ext.Msg.show({ title: gettext(\u0026#39;No valid subscription\u0026#39;), Restart the Proxmox web service (also be sure to clear your browser cache, depending on the browser you may need to open a new tab or restart the browser) systemctl restart pveproxy.service Additional Notes You can quickly check if the change has been made:\ngrep -n -B 1 \u0026#39;No valid sub\u0026#39; proxmoxlib.js You have three options to revert the changes:\nManually edit proxmoxlib.js to undo the changes you made Restore the backup file you created from the proxmox-widget-toolkit directory: mv proxmoxlib.js.bak proxmoxlib.js Reinstall the proxmox-widget-toolkit package from the repository: apt-get install --reinstall proxmox-widget-toolkit This guide is based from John McLaren\u0026rsquo;s blog over at https://johnscs.com.\n","permalink":"https://netsparse.dev/posts/2023-01-23-remove-proxmox-sub-notice/","summary":"\u003cp\u003eEvery once in a while, I run an update on my proxmox server and reboot.\u003c/p\u003e","title":"Quickly Remove Proxmox Subscription Notice"},{"content":"So it\u0026rsquo;s been quite the journey figuring out the ins \u0026amp; outs of setting up a blog and writing posts in markdown. So I figured I may as well write about it.\nComing briefly from writing posts on Wordpress, I wanted to take on the challenge in learning how to use Git, treating the setup of this site as code, and jumping into a bit of CI/CD when it comes to deploying some of the changes to this site, as it is currently now hosted on Netlify.\nPrevious Iteration of this Site Previously, I was testing the waters with running Wordpress in a docker container on a AWS EC2 instance.\nAmazon\u0026rsquo;s free-tier program lets me run 1 instance for free, for 12-months, so long as I don\u0026rsquo;t exceed any bandwidth, disk usage, and so forth.\nI liked the idea and the setup was a bit straightforward for me, as I was already familiar with docker and running services in my homelab for quite some time now.\nAfter setting up the site and launching it, I began seeing many attempts to login to the /wp-admin site.\nI read that this is usually a common thing with internet facing sites, but was able to mitigate it by adding some WAF rules in Cloudflare.\nAll worked fine and the brute force attempts went away.\nI let the host run for about 3 months, just to see how it dealt with any inbound bots and whatnot, and it actually did quite well.\nSlowdown As I started posting, adding some testing material and so forth, I began to notice Wordpress slowing down (differences in speed and also when loading any other webpages). This was minimal at first but began to incrementally get worse over time.\nGiven that Wordpress was running as a lightweight docker container, I do think I was pushing the EC2 instance quite a bit once I started adding and changing the content, and also adding more containers.\nI started experimenting with hosting the blog separately on the same machine as a separate docker container running Ghost. I believe this is when I started to see the slow down a lot more.\nI want to be honest and say that this is likely not best practice as I had no load-balancing or any redundancy whatsoever, although I do think it makes for an invaluable learning experience.\nAs I managed the new site and worked my way through learning AWS, I kind of wanted to push it a bit further to see what this little instance could handle, so I setup a separate container running Matomo for analytics. I knew there was an add-on for Wordpress but wanted to try the full suite on its own.\nAnd voila! It kept running!\nAfter the fun and experimentation, and after learning and realizing that the tiny machine on the cloud could keep up (with minimal traffic of course, since any substantial increase would otherwise trample it), I had to eventually move on to something more robust, simpler, and possibly cooler to manage. And that is where I ended up here.\nStatic Site Generators For those of you that may be new to SSGs (like me), they\u0026rsquo;re essentially a way to automate the creation (or generation) of full static HTML webpages using templates, without needing to fully code the HTML from scratch.\nYou can find a good explanation from Cloudflare here.\nI had several options I could choose from initially, I was mixed between going with some of the popular ones like Hugo, Jekyll, 11ty and a few others.\nI have also wanted to learn Git for quite some time now, so I figured this would be a good opportunity to give it a shot.\nAlthough I\u0026rsquo;ve managed to setup and experiment with both Hugo and Jekyll, I decided to stick with Jekyll for now since I had pretty much set up this site on Jekyll, plus I liked the minimal theme of this site.\nThough I may plan on moving this blog into Hugo in the future!\nUPDATE: This blog has now been successfully transferred to Hugo as of April 2023.\nWhat now? The goal of this site is not only to document my learning, but also, to share it.\nAny content here is both for my reference, but also for you, any value you get out of it is both a win/win.\nAnyone out there that is also on their journey in IT, or any career in tech, I wish you the best, and good luck!\nThanks again for reading!\n","permalink":"https://netsparse.dev/posts/2023-01-22-journey/","summary":"\u003cp\u003eSo it\u0026rsquo;s been quite the journey figuring out the ins \u0026amp; outs of setting up a blog and writing posts in markdown.\nSo I figured I may as well write about it.\u003c/p\u003e","title":"Journey of this Site"},{"content":"I’ve had a huge interest in computers, the internet, building things, and learning, since I was a kid.\nHaving grown up with limited access to the web, I was always astounded by computers, what they could do, and also what we could do with them.\nWhen I became older, and got my first personal laptop, a whole new world was introduced to me, and that was when I knew I wanted to take on the challenge of learning the magic behind the system.\nBackground I’ve worked in the IT industry since 2018, in positions ranging from Geek Squad Agent to Network Specialist for a large ISP.\nIn May 2022, I completed my Associates of Applied Science (AAS) in LAN Systems/Network Administration from Austin Community College.\nCurrently, I am pursuing the Cisco CCNA, along with Security+ and Linux+ certifications, with the goal of completing the CCNA by the end of 2023, and the other two by mid-2024.\nI find that my strengths are in enterprise networking systems, virtualization, cybersecurity, and DevOps, with plenty more that I continue to learn everyday.\nWhy? I started this site to document my journey, and share what I’ve learned throughout school and on my own, with anyone that may also be pursuing a similar path (or is simply just a curious soul like me). As I’ve kept pushing through, I believe many of us eventually come to realize.. We never stop learning.\nNormally, I’m accustomed to learning about networks and Linux, I’ve recently taken a dive into the world of web development, hosting websites and web apps. I’ve had a bit of experience using things like Docker to host services in my home lab, so this serves me as a potential learning opportunity to expand my existing skillsets and possibly be of help for people on that same journey.\nHobbies When I am not spinning up new virtual machines, fixing up my home lab, writing a blog post, or performing some kind of troubleshooting, you can usually find me outdoors hiking around the many trails in Austin, along with occasional kayaking, cruising in or around the city, and jamming out to some epic tunes.\nOther hobbies of mine include playing the piano, guitar and ocassionally some drums, along with a multitude of other things.\nFeel free to reach out to me anytime.\nThanks for checking out my site!\n","permalink":"https://netsparse.dev/about/","summary":"I’ve had a huge interest in computers, the internet, building things, and learning, since I was a kid.\nHaving grown up with limited access to the web, I was always astounded by computers, what they could do, and also what we could do with them.\nWhen I became older, and got my first personal laptop, a whole new world was introduced to me, and that was when I knew I wanted to take on the challenge of learning the magic behind the system.","title":"About"},{"content":"You may contact me through the channels below, feel free to reach out regarding any questions.\nLinkedIn https://linkedin.com/in/netsparse\n","permalink":"https://netsparse.dev/contact/","summary":"You may contact me through the channels below, feel free to reach out regarding any questions.\nLinkedIn https://linkedin.com/in/netsparse","title":"Contact"},{"content":"2023 Future Full Lab Orchestration with Kubernetes Current Improvements in Backup \u0026amp; Recovery Strategies Local Services Performance fine-tuning Home Lab Documentation Website / Blog Revisions Completed Migration to Hugo (from Jekyll) - April 2023 Reference Blog launched - Jan 2023 Website launched - Jan 2023 2022 The projects below are a general overview of some of the major projects I was able to complete over the course of the year, no detailed documentation exists as things were constantly evolving, although I may write about some of the techniques and setup guides in a future post.\nProxmox server deployment (H2DC) Migrated most applications to Docker (both) Restructuring of H2DC network 2021 Whole-network UPS upgrade (H2DC) Restructuring of H1DC Network First test runs of Docker on H1DC Lab 2020 Initial lab designs (both) H2DC Lab Deployed New Synology NAS (H2DC) 2019 H1DC Lab Deployed Homelab begins ","permalink":"https://netsparse.dev/projects/","summary":"2023 Future Full Lab Orchestration with Kubernetes Current Improvements in Backup \u0026amp; Recovery Strategies Local Services Performance fine-tuning Home Lab Documentation Website / Blog Revisions Completed Migration to Hugo (from Jekyll) - April 2023 Reference Blog launched - Jan 2023 Website launched - Jan 2023 2022 The projects below are a general overview of some of the major projects I was able to complete over the course of the year, no detailed documentation exists as things were constantly evolving, although I may write about some of the techniques and setup guides in a future post.","title":"Projects"}]